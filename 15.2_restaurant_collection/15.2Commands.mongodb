use(findMyRestaurant)
//1.1 –Write a MongoDB query to display all the documents in the restaurant collection
db.restaurants.find({})
//1.2 - Write a MongoDB query to display all restaurants that have a specific cuisine
db.restaurants.find({ cuisine: 'Cafe' })
//1.3 - Write a MongoDb query that displays only kosher restaurants
db.restaurants.find({ isKosherHalal: true })
//1.4 - Write a MongoDb query that displays only specific cities restaurants
db.restaurants.find({ "address.city": "Roma" })
//1.5 Write a MongoDb query to display a specific restaurants address
db.restaurants.find({
  address: {
    city: 'Madrid',
    street: 'C. del León, 35, Centro',
    coordinates: [
      -77.564,
      40.677
    ]
  }
})
//
//1.6 - Write a MongoDB query to display specific restaurants coordinates
db.restaurants.find({ "address.coordinates": [-50.564, 46.677] })

//1.7. - Write a MongoDB query that should display all restaurants in ascending order by restaurant name.
db.restaurants.find({}).sort({ name: 1 })

//1.8 - Write a MongoDB query that should display all restaurants in ascending order by city names
db.restaurants.find({}).sort({ "address.city": 1 })

//1.9 - Update a specific restaurant's name
db.restaurants.updateOne(
  { _id: ObjectId('659566590c91caba45ec4904') },
  {
    $set: { name: "Pizzeria Eden Barcelona" }
  }
)

//1.10 - Update a specific restaurant by adding a new review.
db.restaurants.updateOne(
  { _id: ObjectId('659564310c91caba45ec4903') },
  {
    $push: {
      reviews: {
        date: new Date("<2023-01-01>"),
        score: 4.8
      }
    }
  }
)

//1.11 - Update all restaurants to be kosher

db.restaurants.updateMany({}, { $set: { isKosherHalal: true } })

//1.12 - Delete a specific restaurant
db.restaurants.deleteOne({ _id: ObjectId('659564310c91caba45ec4903') })

//1.13 - Delete all restaurants
db.restaurants.deleteMany({})


// 2. forEach Queries
// use the forEach cursor method to query the following:
// 2.1 - Write a MongoDB query to print all restaurant names.
db.restaurants.find().forEach(myDoc => {
  print("Restaurant name: " + myDoc.name)
})
// 2.2 - Write a MongoDB query to print all restaurant cities
db.restaurants.find().forEach(myDoc => {
  print("Restaurant city: " + myDoc.address.city)
})
// 2.3 - Write a MongoDb query to print all restaurant coordinates
db.restaurants.find().forEach(myDoc => {
  print("Restaurant coordinates: " + myDoc.address.coordinates)
})


// 3. Advanced Queries
// 3.1 - Query for restaurant names that start with a specific alphabet
db.restaurants.find({ name: { $regex: /^P/ } })

// 3.2 - Query how many documents you have from the restaurant collection.
db.restaurants.countDocuments()
// 3.3 - Write a MongoDb query to get restaurants that include reviews from a specific date.
db.restaurants.find({ reviews: { $elemMatch: { date: new Date("2023-12-31T22:00:00.000Z") } } })
// db.restaurants.find({ reviews: { $in: [{ date: new Date("<2023-01-01>") }] } })
// db.restaurants.find({ reviews: { $in: [{ date: new Date("2023-12-31T22:00:00.000Z") }] } })


// 4. Aggregation operations
// use the aggregation framework to query the following:
// 4.1- Write a mongoDb query to display all restaurants average score.
db.restaurants.aggregate(
  [
    { $unwind: "$reviews" },
    {
      $group: {
        _id: null,
        averageValue: { $avg: "$reviews.score" }
      }
    }
  ]
)

// 4.2 - Write a MongoDB query to display a specific restaurant average score

db.restaurants.aggregate(
  [
    { $match: { name: "Ristocaffè" } },
    { $unwind: "$reviews" },
    {
      $group: {
        "_id": null,
        avg: { $avg: "$reviews.score" }
      }
    }
  ]
);